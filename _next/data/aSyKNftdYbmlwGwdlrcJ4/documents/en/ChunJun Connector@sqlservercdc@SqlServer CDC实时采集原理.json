{"pageProps":{"content":"\n              <a id=\"SqlServer CDC 实时采集原理\" style='display: block; height: 35px;'></a>\n              <h1>\n                SqlServer CDC 实时采集原理\n              </h1>\n            \n              <a id=\"一、基础\" style='display: block; height: 35px;'></a>\n              <h2>\n                一、基础\n              </h2>\n            <p>SqlServer 官方从 SqlServer 2008 版本开始支持 CDC，文档连接如下：\n<a href=\"https://docs.microsoft.com/zh-cn/sql/relational-databases/track-changes/about-change-data-capture-sql-server?view=sql-server-ver15\">about-change-data-capture-sql-server</a></p>\n\n              <a id=\"二、配置\" style='display: block; height: 35px;'></a>\n              <h2>\n                二、配置\n              </h2>\n            <p>配置文档链接如下：\n<a href=\"SqlServer%E9%85%8D%E7%BD%AECDC.md\">SqlServer 配置 CDC</a></p>\n\n              <a id=\"三、原理\" style='display: block; height: 35px;'></a>\n              <h2>\n                三、原理\n              </h2>\n            \n              <a id=\"1、SQL Server Agent\" style='display: block; height: 35px;'></a>\n              <h3>\n                1、SQL Server Agent\n              </h3>\n            <p>SQL Server Agent 代理服务，是 sql\nserver 的一个标准服务，作用是代理执行所有 sql 的自动化任务，以及数据库事务性复制等无人值守任务。这个服务在默认安装情况下是停止状态，需要手动启动，或改为自动运动，否则 sql 的自动化任务都不会执行的，还要注意服务的启动帐户。\n简单的说就是启动了这个服务，捕获进程才会处理事务日志并将条目写入 CDC 表。\n<a href=\"https://docs.microsoft.com/zh-cn/sql/ssms/agent/sql-server-agent?view=sql-server-ver15\">sql-server-agent</a></p>\n\n              <a id=\"2、数据库 CDC 开启前后对比\" style='display: block; height: 35px;'></a>\n              <h3>\n                2、数据库 CDC 开启前后对比\n              </h3>\n            <p>开启前：</p>\n<p><img src=\"/doc/SqlserverCDC/Sqlserver7.png\" alt=\"image\"></p>\n<p>开启后：</p>\n<p>EXEC sys.sp_cdc_enable_db;</p>\n<p><img src=\"/doc/SqlserverCDC/Sqlserver8.png\" alt=\"image\"></p>\n<p>我们首先观察 dbo 下新增了一张<strong>systranschemas</strong>表，<strong>systranschemas</strong>表用于跟踪事务发布和快照发布中发布的项目中的架构更改。</p>\n<table>\n<thead>\n<tr>\n<th>列名称</th>\n<th>数据类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tabid</td>\n<td>int</td>\n<td>标识发生了架构更改的表项目。</td>\n</tr>\n<tr>\n<td>startlsn 时发生</td>\n<td>binary</td>\n<td>架构更改开始时的 LSN 值。</td>\n</tr>\n<tr>\n<td>endlsn</td>\n<td>binary</td>\n<td>架构更改结束时的 LSN 值。</td>\n</tr>\n<tr>\n<td>typeid</td>\n<td>int</td>\n<td>架构更改的类型。</td>\n</tr>\n</tbody></table>\n<p>数据库下新增了名为 cdc 的 schema，其实也新增了 cdc 用户。cdc 下新增了以下四张表：\n<br/></p>\n<ul>\n<li>1、captured_columns\n为在捕获实例中跟踪的每一列返回一行。 默认情况下，将捕获源表中的所有列。 但是，如果为变更数据捕获启用了源表，则可以通过指定列列表将列包括在捕获范围内或排除在捕获范围之外。 当没有任何业务表开启了 CDC 时，该表为空。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>列名称</th>\n<th>数据类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>object_id</td>\n<td>int</td>\n<td>捕获的列所属的更改表的 ID。</td>\n</tr>\n<tr>\n<td>column_name</td>\n<td>sysname</td>\n<td>捕获的列的名称。</td>\n</tr>\n<tr>\n<td>column_id</td>\n<td>int</td>\n<td>捕获的列在源表内的 ID。</td>\n</tr>\n<tr>\n<td>column_type</td>\n<td>sysname</td>\n<td>捕获的列的类型。</td>\n</tr>\n<tr>\n<td>column_ordinal</td>\n<td>int</td>\n<td>更改表中的列序号（从 1 开始）。 将排除更改表中的元数据列。 序号 1 将分配给捕获到的第一个列。</td>\n</tr>\n<tr>\n<td>is_computed</td>\n<td>bit</td>\n<td>表示捕获到的列是源表中计算所得的列。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>2、change_tables\n为数据库中的每个更改表返回一行。 对源表启用变更数据捕获时，将创建一个更改表。 当没有任何业务表开启了 CDC 时，该表为空。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>列名称</th>\n<th>数据类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>object_id</td>\n<td>int</td>\n<td>更改表的 ID。 在数据库中是唯一的。</td>\n</tr>\n<tr>\n<td>version</td>\n<td>int</td>\n<td>标识为仅供参考。 不支持。 不保证以后的兼容性。对于 SQL Server 2012 (11.x)，此列始终返回 0。</td>\n</tr>\n<tr>\n<td>source_object_id</td>\n<td>int</td>\n<td>为变更数据捕获启用的源表的 ID。</td>\n</tr>\n<tr>\n<td>capture_instance</td>\n<td>sysname</td>\n<td>用于命名特定于实例的跟踪对象的捕获实例的名称。 默认情况下，该名称从源架构名称加上源表名称派生，格式 schemaname_sourcename。</td>\n</tr>\n<tr>\n<td>start_lsn</td>\n<td>binary(10)</td>\n<td>日志序列号 (LSN)，表示查询更改表中的更改数据时的低端点。NULL = 尚未建立低端点。</td>\n</tr>\n<tr>\n<td>end_lsn</td>\n<td>binary(10)</td>\n<td>标识为仅供参考。 不支持。 不保证以后的兼容性。对于 SQL Server 2008，此列始终返回 NULL。</td>\n</tr>\n<tr>\n<td>supports_net_changes</td>\n<td>bit</td>\n<td>对更改表启用了查询净更改支持。</td>\n</tr>\n<tr>\n<td>has_drop_pending</td>\n<td>bit</td>\n<td>捕获进程收到关于源表已被删除的通知。</td>\n</tr>\n<tr>\n<td>role_name</td>\n<td>sysname</td>\n<td>用于访问更改数据的数据库角色的名称。NULL = 未使用角色。</td>\n</tr>\n<tr>\n<td>index_name</td>\n<td>sysname</td>\n<td>用于唯一标识源表中的行的索引名称。 index_name 为源表的主键索引的名称，或者在对源表启用了变更数据捕获时指定的唯一索引的名称。NULL = 在变更数据捕获启用时，源表无主键，且未指定唯一索引。注意：如果对具有主键的表启用了变更数据捕获，则不管是否启用了净更改，&quot;变更数据捕获&quot; 功能都将使用索引。 启用变更数据捕获之后，将不允许对主键进行修改。 如果该表没有主键，则仍可以启用变更数据捕获，但是只能将净更改设置为 False。 启用变更数据捕获之后，即可以创建主键。 由于变更数据捕获功能不使用主键，因此还可以修改主键。</td>\n</tr>\n<tr>\n<td>filegroup_name</td>\n<td>sysname</td>\n<td>更改表所驻留的文件组的名称。 NULL = 更改表在数据库的默认文件组中。</td>\n</tr>\n<tr>\n<td>create_date</td>\n<td>datetime</td>\n<td>启用源表的日期。</td>\n</tr>\n<tr>\n<td>partition_switch</td>\n<td>bit</td>\n<td>指示是否可以对启用了变更数据捕获的表执行 ALTER TABLE 的 SWITCH PARTITION 命令。 0 指示分区切换被阻止。 未分区表始终返回 1。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>3、ddl_history\n为对启用了变更数据捕获的表所做的每一项数据定义语言 (DDL) 更改返回一行。 可以使用此表来确定源表发生 DDL 更改的时间以及更改的内容。 此表中不包含未发生 DDL 更改的源表的任何条目。\n当没有任何开启了 CDC 的业务表的表结构发生变更时，该表为空。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>列名称</th>\n<th>数据类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>source_object_id</td>\n<td>int</td>\n<td>应用 DDL 更改的源表的 ID。</td>\n</tr>\n<tr>\n<td>object_id</td>\n<td>int</td>\n<td>与源表的捕获实例相关联的更改表的 ID。</td>\n</tr>\n<tr>\n<td>required_column_update</td>\n<td>bit</td>\n<td>指示在源表中修改了捕获列的数据类型。 此修改改变了更改表中的列。</td>\n</tr>\n<tr>\n<td>ddl_command</td>\n<td>nvarchar(max)</td>\n<td>应用于源表的 DDL 语句。</td>\n</tr>\n<tr>\n<td>ddl_lsn</td>\n<td>binary(10)</td>\n<td>与 DDL 修改的提交相关联的日志序列号 (LSN)。</td>\n</tr>\n<tr>\n<td>ddl_time</td>\n<td>datetime</td>\n<td>对源表所做的 DDL 更改的日期和时间。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>4、index_columns\n为与更改表关联的每个索引列返回一行。 变更数据捕获使用这些索引列来唯一标识源表中的行。 默认情况下，将包括源表的主键列。 但是，如果在对源表启用变更数据捕获时指定了源表的唯一索引，则将改用该索引中的列。\n如果启用净更改跟踪，则该源表需要主键或唯一索引。 当没有任何开启了 CDC 的业务表存在存在索引列时，该表为空。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>列名称</th>\n<th>数据类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>object_id</td>\n<td>int</td>\n<td>更改表的 ID。</td>\n</tr>\n<tr>\n<td>column_name</td>\n<td>sysname</td>\n<td>索引列的名称。</td>\n</tr>\n<tr>\n<td>index_ordinal</td>\n<td>tinyint</td>\n<td>索引中的列序号（从 1 开始）。</td>\n</tr>\n<tr>\n<td>column_id</td>\n<td>int</td>\n<td>源表中的列 ID。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>5、lsn_time_mapping\n为每个在更改表中存在行的事务返回一行。 该表用于在日志序列号 (LSN) 提交值和提交事务的时间之间建立映射。 没有对应的更改表项的项也可以记录下来， 以便表在变更活动少或者无变更活动期间将 LSN 处理的完成过程记录下来。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>列名称</th>\n<th>数据类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>start_lsn</td>\n<td>binary(10)</td>\n<td>提交的事务的 LSN。</td>\n</tr>\n<tr>\n<td>tran_begin_time</td>\n<td>datetime</td>\n<td>与 LSN 关联的事务开始的时间。</td>\n</tr>\n<tr>\n<td>tran_end_time</td>\n<td>datetime</td>\n<td>事务结束的时间。</td>\n</tr>\n<tr>\n<td>tran_id</td>\n<td>varbinary (10)</td>\n<td>事务的 ID。</td>\n</tr>\n</tbody></table>\n<p>cdc 下新增以下函数：\n<br/></p>\n<ul>\n<li>1、fn<em>cdc_get_all_changes</em>\n为在指定日志序列号 (LSN) 范围内应用到源表的每项更改返回一行。 如果源行在该间隔内有多项更改，则每项更改都会表示在返回的结果集中。 除了返回更改数据外，四个元数据列还提供了将更改应用到另一个数据源所需的信息。\n行筛选选项可控制元数据列的内容以及结果集中返回的行。 当指定“all”行筛选选项时，针对每项更改将只有一行来标识该更改。 当指定“all update\nold”选项时，更新操作会表示为两行：一行包含更新之前已捕获列的值，另一行包含更新之后已捕获列的值。此枚举函数是在对源表启用变更数据捕获时创建的。 函数名称是派生的，并使用 <strong>cdc.fn<em>cdc_get_all_changes</em></strong>_\ncapture_instance_ 格式，其中 <em>capture_instance</em> 是在源表启用变更数据捕获时为捕获实例指定的值。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>列名称</th>\n<th>数据类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>__$start_lsn</td>\n<td>binary(10)</td>\n<td>与更改关联的提交 LSN，用于保留更改的提交顺序。 在同一事务中提交的更改将共享同一个提交 LSN 值。</td>\n</tr>\n<tr>\n<td>__$seqval</td>\n<td>binary(10)</td>\n<td>用于对某事务内的行更改进行排序的序列值。</td>\n</tr>\n<tr>\n<td>__$operation</td>\n<td>int</td>\n<td>标识将更改数据行应用到目标数据源所需的数据操作语言 (DML) 操作。 可以是以下值之一：<br/>1 = 删除 <br/> 2 = 插入 <br/> 3 = 更新（捕获的列值是执行更新操作前的值）。 仅当指定了行筛选选项“all update old”时才应用此值。<br/> 4 = 更新（捕获的列值是执行更新操作后的值）。</td>\n</tr>\n<tr>\n<td>__$update_mask</td>\n<td>varbinary(128)</td>\n<td>位掩码，为捕获实例标识的每个已捕获列均对应于一个位。 当 ** $ operation = 1 或 2 时，该值将所有已定义的位设置为 1。 当 ** $ operation = 3 或 4 时，只有与更改的列相对应的位设置为 1。</td>\n</tr>\n<tr>\n<td>&lt;captured source table columns&gt;</td>\n<td>多种多样</td>\n<td>函数返回的其余列是在创建捕获实例时标识的已捕获列。 如果已捕获列的列表中未指定任何列，则将返回源表中的所有列。</td>\n</tr>\n</tbody></table>\n<ul>\n<li>2、fn<em>cdc_get_net_changes</em>\n为 (LSN) 范围内的指定日志序列号内的每个源行返回一个净更改行，返回格式跟上面一样。</li>\n</ul>\n\n              <a id=\"3、业务表 CDC 开启前后对比\" style='display: block; height: 35px;'></a>\n              <h3>\n                3、业务表 CDC 开启前后对比\n              </h3>\n            <p>开启前跟上一张图一致</p>\n<p>开启 SQL：</p>\n<pre><code class=\"language-sql\">sys\n.\nsp_cdc_enable_table\n<span class=\"hljs-comment\">-- 表所属的架构名</span>\n[ @source_schema = ] <span class=\"hljs-string\">&#x27;source_schema&#x27;</span>,\n\n<span class=\"hljs-comment\">-- 表名</span>\n[ @source_name = ] <span class=\"hljs-string\">&#x27;source_name&#x27;</span> ,\n\n<span class=\"hljs-comment\">-- 是用于控制更改数据访问的数据库角色的名称</span>\n[ @role_name = ] <span class=\"hljs-string\">&#x27;role_name&#x27;</span>\n\n<span class=\"hljs-comment\">-- 是用于命名变更数据捕获对象的捕获实例的名称，这个名称在后面的存储过程和函数中需要经常用到。</span>\n[,[ @capture_instance = ] <span class=\"hljs-string\">&#x27;capture_instance&#x27;</span> ]\n\n<span class=\"hljs-comment\">-- 指示是否对此捕获实例启用净更改查询支持如果此表有主键，或者有已使用 @index_name 参数进行标识的唯一索引，则此参数的默认值为 1。否则，此参数默认为 0。</span>\n[,[ @supports_net_changes = ] supports_net_changes ]\n\n<span class=\"hljs-comment\">-- 用于唯一标识源表中的行的唯一索引的名称。index_name 为 sysname，并且可以为 NULL。</span>\n<span class=\"hljs-comment\">-- 如果指定，则 index_name 必须是源表的唯一有效索引。如果指定 index_name，则标识的索引列优先于任何定义的主键列，就像表的唯一行标识符一样。</span>\n[,[ @index_name = ] <span class=\"hljs-string\">&#x27;index_name&#x27;</span> ]\n\n<span class=\"hljs-comment\">-- 需要对哪些列进行捕获。captured_column_list 的数据类型为 nvarchar(max)，并且可以为 NULL。如果为 NULL，则所有列都将包括在更改表中。</span>\n[,[ @captured_column_list = ] <span class=\"hljs-string\">&#x27;captured_column_list&#x27;</span> ]\n\n<span class=\"hljs-comment\">-- 是要用于为捕获实例创建的更改表的文件组。</span>\n[,[ @filegroup_name = ] <span class=\"hljs-string\">&#x27;filegroup_name&#x27;</span> ]\n\n<span class=\"hljs-comment\">-- 指示是否可以对启用了变更数据捕获的表执行 ALTER TABLE 的 SWITCH PARTITION 命令。</span>\n<span class=\"hljs-comment\">-- allow_partition_switch 为 bit，默认值为 1。</span>\n[,[ @partition_switch = ] <span class=\"hljs-string\">&#x27;partition_switch&#x27;</span> ]\n</code></pre>\n<p>开启后：</p>\n<p><img src=\"/doc/SqlserverCDC/Sqlserver9.png\" alt=\"image\"></p>\n<p>此时，cdc 下新增了一张名为 dbo<em>kudu_CT 的表，对于任意开启 CDC 的业务表而言，都会在其对应的 cdc schema 下创建一张格式为$schema</em>$table}_CT 的表。</p>\n<p><strong>1、dbo_kudu_CT：</strong>\n对源表启用变更数据捕获时创建的更改表。 该表为对源表执行的每个插入和删除操作返回一行，为对源表执行的每个更新操作返回两行。 如果在启用源表时未指定更改表的名称，则会使用一个派生的名称。 名称的格式为\ncdc。capture_instance _CT 其中 capture_instance 是源表的架构名称和格式 schema_table 的源表名称。 例如，如果对 AdventureWorks 示例数据库中的表 Person\n启用了变更数据捕获，则派生的更改表名称将 cdc.Person_Address_CT。</p>\n<table>\n<thead>\n<tr>\n<th>列名称</th>\n<th>数据类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>__$start_lsn</td>\n<td>binary(10)</td>\n<td>与相应更改的提交事务关联的日志序列号 (LSN)。在同一事务中提交的所有更改将共享同一个提交 LSN。 例如，如果对源表的 delete 操作删除两行，则更改表将包含两行，每行都具有相同的 __ $ start_lsn 值。</td>\n</tr>\n<tr>\n<td>__ $ end_lsn</td>\n<td>binary(10)</td>\n<td>标识为仅供参考。 不支持。 不保证以后的兼容性。在 SQL Server 2012 (11.x) 中，此列始终为 NULL。</td>\n</tr>\n<tr>\n<td>__$seqval</td>\n<td>binary(10)</td>\n<td>用于对事务内的行更改进行排序的序列值。</td>\n</tr>\n<tr>\n<td>__$operation</td>\n<td>int</td>\n<td>标识与相应更改关联的数据操作语言 (DML) 操作。 可以是以下值之一：<br/>1 = 删除<br/>2 = 插入<br/>3 = 更新（旧值）列数据中具有执行更新语句之前的行值。<br/>4 = 更新（新值）列数据中具有执行更新语句之后的行值。</td>\n</tr>\n<tr>\n<td>__$update_mask</td>\n<td>varbinary(128)</td>\n<td>基于更改表的列序号的位掩码，用于标识那些发生更改的列。</td>\n</tr>\n<tr>\n<td>&lt;captured source table columns&gt;</td>\n<td>多种多样</td>\n<td>更改表中的其余列是在创建捕获实例时源表中标识为已捕获列的那些列。 如果已捕获列的列表中未指定任何列，则源表中的所有列将包括在此表中。</td>\n</tr>\n<tr>\n<td>__ $ command_id</td>\n<td>int</td>\n<td>跟踪事务中的操作顺序。</td>\n</tr>\n</tbody></table>\n<p><strong>2、captured_columns：</strong></p>\n<p><img src=\"/doc/SqlserverCDC/Sqlserver10.png\" alt=\"image\"></p>\n<p><strong>3、change_tables：</strong></p>\n<p><img src=\"/doc/SqlserverCDC/Sqlserver11.png\" alt=\"image\"></p>\n\n              <a id=\"4、采集原理\" style='display: block; height: 35px;'></a>\n              <h3>\n                4、采集原理\n              </h3>\n            \n              <a id=\"1、insert/delete\" style='display: block; height: 35px;'></a>\n              <h4>\n                1、insert/delete\n              </h4>\n            <p>对于 insert 和 delete 类型的数据变更，对于每一行变更都会在对应的${schema}_${table}_\nCT 表中增加一行记录。对于 insert，id，user_id，name 记录的是 insert 之后的 value 值；对于 delete，id，user_id，name 记录的是 delete 之前的 value 值；\n<img src=\"/doc/SqlserverCDC/Sqlserver12.png\" alt=\"image\"></p>\n\n              <a id=\"2、update\" style='display: block; height: 35px;'></a>\n              <h4>\n                2、update\n              </h4>\n            <p>a、更新了主键 此时，SqlServer 数据库的做法是在同一事物内，先将原来的记录删除，然后再重新插入。 执行如下 SQL，日志表如图所示： UPDATE [dbo].[kudu] SET [id] = 2, [user_id] = &#39;\n2&#39;, [name] = &#39;b&#39; WHERE [id] = 1;\n<img src=\"/doc/SqlserverCDC/Sqlserver13.png\" alt=\"image\"></p>\n<p>b、未更新主键\n此时，SqlServer 数据库的做法是直接更新字段信息。\n执行如下 SQL，日志表如图所示：\nUPDATE [dbo].[kudu] SET [user_id] = &#39;3&#39;, [name] = &#39;c&#39; WHERE [id] = 2;</p>\n<p><img src=\"/doc/SqlserverCDC/Sqlserver14.png\" alt=\"image\"></p>\n\n              <a id=\"3、流程图\" style='display: block; height: 35px;'></a>\n              <h4>\n                3、流程图\n              </h4>\n            <p><img src=\"/doc/SqlserverCDC/SqlserverCdc%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"image\"></p>\n<p>对于 ChunJun SqlServer CDC 实时采集插件，其基本原理便是以轮询的方式，循环调用 fn<em>cdc_get_all_changes</em>函数，获取上次结束时的 lsn 与当前数据库最大 lsn 值之间的数据。对于 insert/delete 类型的数据获取并解析一行，对于 update 类型获取并解析两行。解析完成后把数据传递到下游并记录当前解析到的数据的 lsn，为下次轮询做准备。</p>\n\n              <a id=\"4、数据格式\" style='display: block; height: 35px;'></a>\n              <h4>\n                4、数据格式\n              </h4>\n            <pre><code class=\"language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;update&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;schema&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;dbo&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;table&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;tb1&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;lsn&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;00000032:00002038:0005&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;ts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">6760525407742726144</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;before_id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;after_id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n","tree":[{"label":"General Configuration","category":"file"},{"label":"Quick Start","category":"file"},{"label":"Advanced Features","children":[{"label":"增量同步介绍","path":"增量同步介绍","category":"file"},{"label":"断点续传介绍","path":"断点续传介绍","category":"file"},{"label":"脏数据插件设计","path":"脏数据插件设计","category":"file"}],"category":"dir"},{"label":"ChunJun Connector","children":[{"label":"binlog","category":"dir","children":[{"label":"binlog-source","path":"binlog-source","category":"file"}]},{"label":"clickhouse","category":"dir","children":[{"label":"clickhouse-lookup","path":"clickhouse-lookup","category":"file"},{"label":"clickhouse-sink","path":"clickhouse-sink","category":"file"},{"label":"clickhouse-source","path":"clickhouse-source","category":"file"}]},{"label":"db2","category":"dir","children":[{"label":"db2-lookup","path":"db2-lookup","category":"file"},{"label":"db2-sink","path":"db2-sink","category":"file"},{"label":"db2-source","path":"db2-source","category":"file"}]},{"label":"dm","category":"dir","children":[{"label":"dm-sink","path":"dm-sink","category":"file"},{"label":"dm-source","path":"dm-source","category":"file"}]},{"label":"doris","category":"dir","children":[{"label":"dorisbatch-sink","path":"dorisbatch-sink","category":"file"}]},{"label":"elasticsearch","category":"dir","children":[{"label":"es7-lookup","path":"es7-lookup","category":"file"},{"label":"es7-sink","path":"es7-sink","category":"file"},{"label":"es7-source","path":"es7-source","category":"file"}]},{"label":"gbase","category":"dir","children":[{"label":"gbase-lookup","path":"gbase-lookup","category":"file"},{"label":"gbase-sink","path":"gbase-sink","category":"file"},{"label":"gbase-source","path":"gbase-source","category":"file"}]},{"label":"greenplum","category":"dir","children":[{"label":"greenplum-sink","path":"greenplum-sink","category":"file"},{"label":"greenplum-source","path":"greenplum-source","category":"file"}]},{"label":"hbase","category":"dir","children":[{"label":"hbase-lookup","path":"hbase-lookup","category":"file"},{"label":"hbase-sink","path":"hbase-sink","category":"file"},{"label":"hbase-source","path":"hbase-source","category":"file"}]},{"label":"hdfs","category":"dir","children":[{"label":"hdfs-sink","path":"hdfs-sink","category":"file"},{"label":"hdfs-source","path":"hdfs-source","category":"file"}]},{"label":"hive","category":"dir","children":[{"label":"hive-lookup","path":"hive-lookup","category":"file"},{"label":"hive-sink","path":"hive-sink","category":"file"}]},{"label":"influxdb","category":"dir","children":[{"label":"influxdb-sink","path":"influxdb-sink","category":"file"},{"label":"influxdb-source","path":"influxdb-source","category":"file"}]},{"label":"kafka","category":"dir","children":[{"label":"kafka-sink","path":"kafka-sink","category":"file"},{"label":"kafka-source","path":"kafka-source","category":"file"}]},{"label":"kingbase","category":"dir","children":[{"label":"kingbase-sink","path":"kingbase-sink","category":"file"},{"label":"kingbase-source","path":"kingbase-source","category":"file"}]},{"label":"kudu","category":"dir","children":[{"label":"kudu-lookup","path":"kudu-lookup","category":"file"},{"label":"kudu-sink","path":"kudu-sink","category":"file"},{"label":"kudu-source","path":"kudu-source","category":"file"}]},{"label":"logminer","category":"dir","children":[{"label":"LogMiner-source","path":"LogMiner-source","category":"file"},{"label":"LogMiner原理","path":"LogMiner原理","category":"file"},{"label":"LogMiner配置","path":"LogMiner配置","category":"file"}]},{"label":"mongodb","category":"dir","children":[{"label":"mongodb-lookup","path":"mongodb-lookup","category":"file"},{"label":"mongodb-sink","path":"mongodb-sink","category":"file"},{"label":"mongodb-source","path":"mongodb-source","category":"file"}]},{"label":"mysql","category":"dir","children":[{"label":"mysql-lookup","path":"mysql-lookup","category":"file"},{"label":"mysql-sink","path":"mysql-sink","category":"file"},{"label":"mysql-source","path":"mysql-source","category":"file"}]},{"label":"oracle","category":"dir","children":[{"label":"oracle-lookup","path":"oracle-lookup","category":"file"},{"label":"oracle-sink","path":"oracle-sink","category":"file"},{"label":"oracle-source","path":"oracle-source","category":"file"}]},{"label":"pgwal","category":"dir","children":[{"label":"Postgres-CDC","path":"Postgres-CDC","category":"file"}]},{"label":"postgresql","category":"dir","children":[{"label":"postgres-lookup","path":"postgres-lookup","category":"file"},{"label":"postgres-sink","path":"postgres-sink","category":"file"},{"label":"postgres-source","path":"postgres-source","category":"file"}]},{"label":"rocketmq","category":"dir","children":[{"label":"rocketmq-source","path":"rocketmq-source","category":"file"}]},{"label":"saphana","category":"dir","children":[{"label":"saphana-sink","path":"saphana-sink","category":"file"},{"label":"saphana-source","path":"saphana-source","category":"file"}]},{"label":"sqlserver","category":"dir","children":[{"label":"sqlserver-lookup","path":"sqlserver-lookup","category":"file"},{"label":"sqlserver-sink","path":"sqlserver-sink","category":"file"},{"label":"sqlserver-source","path":"sqlserver-source","category":"file"}]},{"label":"sqlservercdc","category":"dir","children":[{"label":"SqlServer CDC实时采集原理","path":"SqlServer CDC实时采集原理","category":"file"},{"label":"SqlServer配置CDC","path":"SqlServer配置CDC","category":"file"},{"label":"SqlserverCDC-source","path":"SqlserverCDC-source","category":"file"}]}],"category":"dir"},{"label":"ChunJun Extend Data Format","children":[{"label":"protobuf-x","path":"protobuf-x","category":"file"}],"category":"dir"},{"label":"Contribution","children":[{"label":"How to define a plugin","path":"How to define a plugin","category":"file"},{"label":"How to submit a great Pull Request","path":"How to submit a great Pull Request","category":"file"}],"category":"dir"}],"toc":[{"text":"SqlServer CDC 实时采集原理","level":1,"id":"00f28911-fd78-41bb-b689-0e70cedd9782"},{"text":"一、基础","level":2,"id":"0328b967-18ea-4b95-b02f-fc5da0e0bea1"},{"text":"二、配置","level":2,"id":"fa9d1805-883d-4677-b259-5ed6a2ec9c16"},{"text":"三、原理","level":2,"id":"c7ec14ff-afbb-4c17-903a-baaf616403bb"},{"text":"1、SQL Server Agent","level":3,"id":"48b6e04d-5e7b-47c3-8e08-647b7b8c3543"},{"text":"2、数据库 CDC 开启前后对比","level":3,"id":"5dc5b1da-188a-4939-bca5-a1565066bb15"},{"text":"3、业务表 CDC 开启前后对比","level":3,"id":"f754ffa6-7971-4dbc-bcb3-6b56144f5d6d"},{"text":"4、采集原理","level":3,"id":"4b9ad277-1dfc-4b35-b7c9-33a3104b5918"},{"text":"1、insert/delete","level":4,"id":"f0686d33-255a-439e-ba3d-fea527ca69e6"},{"text":"2、update","level":4,"id":"5ce3a5e1-ffac-4d43-948a-c7ce6c110f14"},{"text":"3、流程图","level":4,"id":"74e1ff7c-3a84-4f9c-9759-795a6cc6c8a0"},{"text":"4、数据格式","level":4,"id":"7a6cdd45-4777-4ddf-8a46-69ed3ba1c296"}]},"__N_SSG":true}