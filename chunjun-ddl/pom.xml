<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements.  See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership.  The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License.  You may obtain a copy of the License at
  ~
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<artifactId>chunjun</artifactId>
		<groupId>com.dtstack.chunjun</groupId>
		<version>${revision}</version>
	</parent>
	<modelVersion>4.0.0</modelVersion>

	<artifactId>chunjun-ddl</artifactId>
	<name>ChunJun : DDL</name>
	<modules>
		<module>chunjun-ddl-mysql</module>
		<module>chunjun-ddl-base</module>
		<module>chunjun-ddl-oracle</module>
	</modules>
	<packaging>pom</packaging>

	<properties>
		<sql.dir>ddl</sql.dir>
		<sql.base.dir>ddl</sql.base.dir>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.dtstack.chunjun</groupId>
			<artifactId>chunjun-core</artifactId>
			<version>${project.version}</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-classic</artifactId>
				</exclusion>
				<exclusion>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>29.0-jre</version>
			</dependency>

			<dependency>
				<groupId>org.apache.calcite</groupId>
				<artifactId>calcite-core</artifactId>
				<version>1.26.0</version>
				<exclusions>
					<exclusion>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-api</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.google.guava</groupId>
						<artifactId>guava</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<!-- Extract parser grammar template from calcite-core.jar and put
						 it under ${project.build.directory} where all freemarker templates are. -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.1.2</version>
					<executions>
						<execution>
							<id>unpack-parser-template</id>
							<phase>initialize</phase>
							<goals>
								<goal>unpack</goal>
							</goals>
							<configuration>
								<artifactItems>
									<artifactItem>
										<groupId>org.apache.calcite</groupId>
										<artifactId>calcite-core</artifactId>
										<type>jar</type>
										<overWrite>true</overWrite>
										<outputDirectory>${project.build.directory}/</outputDirectory>
										<includes>**/Parser.jj</includes>
									</artifactItem>
								</artifactItems>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.3.0</version>
					<executions>
						<execution>
							<id>copy-fmpp-resources</id>
							<phase>initialize</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${project.build.directory}/codegen</outputDirectory>
								<resources>
									<resource>
										<directory>src/main/codegen</directory>
										<filtering>false</filtering>
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>com.googlecode.fmpp-maven-plugin</groupId>
					<artifactId>fmpp-maven-plugin</artifactId>
					<version>1.0</version>
					<dependencies>
						<dependency>
							<groupId>org.freemarker</groupId>
							<artifactId>freemarker</artifactId>
							<version>2.3.28</version>
						</dependency>
						<dependency>
							<groupId>org.beanshell</groupId>
							<artifactId>bsh</artifactId>
							<version>2.0b5</version>
						</dependency>
						<dependency>
							<groupId>xml-resolver</groupId>
							<artifactId>xml-resolver</artifactId>
							<version>1.2</version>
						</dependency>
					</dependencies>
					<executions>
						<execution>
							<id>generate-fmpp-sources</id>
							<phase>generate-sources</phase>
							<goals>
								<goal>generate</goal>
							</goals>
							<configuration>
								<cfgFile>${project.build.directory}/codegen/config.fmpp</cfgFile>
								<outputDirectory>target/generated-sources</outputDirectory>
								<templateDirectory>${project.build.directory}/codegen/templates</templateDirectory>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<!-- This must be run AFTER the fmpp-maven-plugin -->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>javacc-maven-plugin</artifactId>
					<version>3.0.1</version>
					<executions>
						<execution>
							<phase>generate-sources</phase>
							<id>javacc</id>
							<goals>
								<goal>javacc</goal>
							</goals>
							<configuration>
								<sourceDirectory>${project.build.directory}/generated-sources/</sourceDirectory>
								<includes>
									<include>**/Parser.jj</include>
								</includes>
								<!-- This must be kept synced with Apache Calcite. -->
								<lookAhead>1</lookAhead>
								<isStatic>false</isStatic>
								<outputDirectory>${project.build.directory}/generated-sources/</outputDirectory>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<executions>
						<execution>
							<id>copy-resources</id>
							<!-- here the phase you need -->
							<phase>package</phase>
							<goals>
								<goal>run</goal>
							</goals>
							<configuration>
								<target>
									<copy todir="${basedir}/../../${dist.dir}/${sql.base.dir}/${sql.dir}/"
										  file="${basedir}/target/${project.artifactId}-${project.version}.jar"/>
									<move file="${basedir}/../../${dist.dir}/${sql.base.dir}/${sql.dir}/${project.artifactId}-${project.version}.jar"
										  tofile="${basedir}/../../${dist.dir}/${sql.base.dir}/${sql.dir}/${project.artifactId}.jar"/>
									<delete>
										<fileset dir="${basedir}/../../${dist.dir}/${sql.base.dir}/${sql.dir}/"
												 includes="${project.artifactId}-*.jar"
												 excludes="${project.artifactId}.jar"/>
									</delete>
								</target>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

</project>
